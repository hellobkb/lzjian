<?php// +----------------------------------------------------------------------// | thinkcmf 翻译// +----------------------------------------------------------------------// | Author: xgj// +----------------------------------------------------------------------namespace Gadgets\Controller;use Common\Controller\AdminbaseController;class TranslateController extends AdminbaseController {		protected $url = "http://api.fanyi.baidu.com/api/trans/vip/translate";  //url	protected $appid ="20160809000026467";               //appid	protected $appkey ="X3PthEGqaRD18UTsfKEf";           //appkey	protected $error_msg =array(			'52001' =>'请求超时',			'52002' =>'系统错误',			'52003' =>'未经授权用户',			'54000' =>'必填参数为空',			'58000' =>'客户端IP非法',			'54001' =>'签名错误',			'54003' =>'访问频率受限',			'58001' =>'译文语言方向不支持',			'54004' =>'账户余额不足',			'54005' =>'长query请求频繁',	);	 		public function index() {		if(IS_POST){			 			$word = I('post.word');       //要翻译的文字			$toword = I('post.toword');   // 目标语言			 			if(!$word){				$this->error("请填写要翻译的文字！");			}						if($toword =='0'){				$this->error("请选择目标语言！");			}						$search['word'] = $word;			$search['toword'] = $toword;			$this->assign("search", $search);						$backfun = $this->translate($word,$toword);			  			//$this->assign("translation" , $backfun['trans_result'][0]['dst']);            $this->assign("translation" , $backfun['trans_result']);			 		} 				$this->display();	}			//翻译	protected function translate($word, $to){		// $word ='';		$args = array(				'q' => $word,				'appid' => $this->appid,				'salt' => rand(10000,99999),				'from' => "auto",				'to' => $to,				);		$args['sign'] = md5($this->appid . $word . $args['salt'] .$this->appkey);		$ret = $this->call($this->url, $args);		$ret = json_decode($ret, true);		 		if($ret['error_code']){			$this->error($this->error_msg[$ret['error_code']]);		}else{			return $ret;		}	 		 	}		 		//	protected function call($url, $args=null, $method="post", $testflag = 0, $timeout = 10, $headers=array()){			$ret = false;		$i =0;				while($ret ==false){						if($i>1){				break;			}			if($i>0){				sleep(1);			}						$ret = $this->callOnce($url, $args, $method , false , $timeout, $headers);			$i++;		}		return $ret;	}			protected function callOnce($url, $args=null, $method="post", $withCookie = false, $timeout = 10, $headers=array()){		$ch = curl_init();		if($method == "post")		{			$data = $this->convert($args);			curl_setopt($ch, CURLOPT_POSTFIELDS, $data);			curl_setopt($ch, CURLOPT_POST, 1);		}		else		{			$data = $this->convert($args);			if($data)			{				if(stripos($url, "?") > 0)				{					$url .= "&$data";				}				else				{					$url .= "?$data";				}			}		}		curl_setopt($ch, CURLOPT_URL, $url);		curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);		if(!empty($headers))		{			curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);		}		if($withCookie)		{			curl_setopt($ch, CURLOPT_COOKIEJAR, $_COOKIE);		}		$r = curl_exec($ch);		curl_close($ch);		return $r;			}			protected function convert(&$args){		$data = '';		if (is_array($args))		{			foreach ($args as $key=>$val)			{				if (is_array($val))				{					foreach ($val as $k=>$v)					{						$data .= $key.'['.$k.']='.rawurlencode($v).'&';					}				}				else				{					$data .="$key=".rawurlencode($val)."&";				}			}			return trim($data, "&");		}		return $args;			}	}